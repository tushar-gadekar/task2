import 'package:freezed_annotation/freezed_annotation.dart';
import '../../domain/user_list/entity/userlist_response_entity.dart';

part 'userlist_state.freezed.dart';

@freezed
class UserListState with _$UserListState {
  const factory UserListState.initial() = _Initial;
  const factory UserListState.loading() = _Loading;
  const factory UserListState.loaded(List<UserEntity> users) = _Loaded;
  const factory UserListState.error(String message) = _Error;
}
import 'package:freezed_annotation/freezed_annotation.dart';

part 'userlist_event.freezed.dart';

@freezed
class UserListEvent with _$UserListEvent {
  const factory UserListEvent.fetchUsers() = _FetchUsers;
}
import 'package:flutter_bloc/flutter_bloc.dart';
import 'userlist_event.dart';
import 'userlist_state.dart';
import '../../domain/user_list/repository/i_userList_repository.dart';

class UserListBloc extends Bloc<UserListEvent, UserListState> {
  final IUserListRepository repository;

  UserListBloc(this.repository) : super(const UserListState.initial()) {
    on<UserListEvent>((event, emit) async {
      await event.map(fetchUsers: (e) async {
        emit(const UserListState.loading());
        try {
          final users = await repository.fetchUsers();
          emit(UserListState.loaded(users));
        } catch (e) {
          emit(UserListState.error(e.toString()));
        }
      });
    });
  }
}
class UserEntity {
  final int id;
  final String email;
  final String firstName;
  final String lastName;
  final String avatar;

  const UserEntity({
    required this.id,
    required this.email,
    required this.firstName,
    required this.lastName,
    required this.avatar,
  });
}
import '../entity/userlist_response_entity.dart';

abstract class IUserListRepository {
  Future<List<UserEntity>> fetchUsers();
}
import '../../../domain/user_list/entity/userlist_response_entity.dart';
import '../../../domain/user_list/repository/i_userList_repository.dart';
import '../data_source/userlist_api.dart';
import '../dto/userlist_response_dto.dart';

class UserListRepository implements IUserListRepository {
  final UserListApi api;

  UserListRepository(this.api);

  @override
  Future<List<UserEntity>> fetchUsers() async {
    final data = await api.fetchUsers();
    return data.map((json) => UserDTO.fromJson(json).toDomain()).toList();
  }
}
import 'package:freezed_annotation/freezed_annotation.dart';
import '../../../domain/user_list/entity/userlist_response_entity.dart';

part 'userlist_response_dto.freezed.dart';
part 'userlist_response_dto.g.dart';

@freezed
class UserDTO with _$UserDTO {
  const factory UserDTO({
    required int id,
    required String email,
    @JsonKey(name: 'first_name') required String firstName,
    @JsonKey(name: 'last_name') required String lastName,
    required String avatar,
  }) = _UserDTO;

  factory UserDTO.fromJson(Map<String, dynamic> json) =>
      _$UserDTOFromJson(json);

  factory UserDTO.fromDomain(UserEntity entity) => UserDTO(
    id: entity.id,
    email: entity.email,
    firstName: entity.firstName,
    lastName: entity.lastName,
    avatar: entity.avatar,
  );
}
extension UserDtoX on UserDTO {
  UserEntity toDomain() {
    return UserEntity(
      id: id,
      email: email,
      firstName: firstName,
      lastName: lastName,
      avatar: avatar,
    );
  }
}
import 'package:dio/dio.dart';

class UserListApi {
  final Dio _dio;

  UserListApi(this._dio);

  Future<List<Map<String, dynamic>>> fetchUsers() async {
    final response = await _dio.get('https://reqres.in/api/users?page=2');
    return List<Map<String, dynamic>>.from(response.data['data']);
  }
}
import 'package:flutter/material.dart';
import '../../../domain/user_list/entity/userlist_response_entity.dart';

class UserTile extends StatelessWidget {
  final UserEntity user;

  const UserTile({super.key, required this.user});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: CircleAvatar(backgroundImage: NetworkImage(user.avatar)),
      title: Text('${user.firstName} ${user.lastName}'),
      subtitle: Text(user.email),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../application/user_list/userlist_bloc.dart';
import '../../application/user_list/userlist_event.dart';
import '../../application/user_list/userlist_state.dart';
import 'widget/user_tile.dart';

class UserListScreen extends StatelessWidget {
  const UserListScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('User List')),
      body: BlocBuilder<UserListBloc, UserListState>(
        builder: (context, state) {
          return state.when(
            initial: () => const Center(child: Text('Press button to load')),
            loading: () => const Center(child: CircularProgressIndicator()),
            loaded: (users) => ListView.builder(
              itemCount: users.length,
              itemBuilder: (context, index) => UserTile(user: users[index]),
            ),
            error: (message) => Center(child: Text(message)),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.read<UserListBloc>().add(const UserListEvent.fetchUsers()),
        child: const Icon(Icons.download),
      ),
    );
  }
}
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'application/login_form/login_form_bloc.dart';
import 'application/user_list/userlist_bloc.dart';
import 'infrastructure/login_form/data_source/login_api.dart';
import 'infrastructure/user_list/data_source/userlist_api.dart';
import 'infrastructure/user_list/repository/userlist_repository.dart';
import 'presentation/login_form/login_form_screen.dart';

void main() {
  final dio = Dio();
  final api = UserListApi(dio);
  final repo = UserListRepository(api);
  runApp( MyApp(repo));
}

class MyApp extends StatelessWidget {
  final UserListRepository repo;

  const MyApp(this.repo ,{super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(create: (_) => LoginFormBloc(loginApi: LoginApi())),
        BlocProvider(create: (_) => UserListBloc(repo)),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Flutter BLoC Login',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          inputDecorationTheme: const InputDecorationTheme(
            border: OutlineInputBorder(),
          ),
        ),
        home: const LoginFormScreen(),
      ),
    );
  }
}
